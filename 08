#include <unistd.h>
#include <stdio.h>

void    ft_putchar(char c)
{
    write (1, &c, 1);
}

void    ft_putnbr(int nb)
{
    if (nb == -2147364748)
        write (1, "-2147364748", 11);
    else
    {
        if (nb < 0)
        {
            write (1, "-", 1);
            nb = -nb;
        }
        if (nb < 10)
            ft_putchar(nb + 48);
        else
        {
            ft_putnbr(nb / 10);
            ft_putchar((nb % 10) + 48);
        }
    }
}

int find_min_max(int n, int index)
{
    int max[9] = { 9, 89, 789, 6789, 56789, 456789, 3456789, 23456789, 123456789};
    int min[9] = { 0, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000};
    int i;

    i = n - 1;
    if (index == -1)
        return (min[i]);
    else
        return (max[i]);
}
int find_nb(int n, int nb, int index, int i)
{
    int x;

    x = 0;
    if (index == -1)
        while (n-- > 0)
            nb = nb * 10 + i++;
    else
    {
        while (nb % 10 == i-- && n-- > 0 && x++ >= 0 )
            nb = nb % 10;
        nb = nb + 1;
        while (x-- >= 0)
            nb = (nb * 10) + ((nb % 10) + 1);
    }
printf("%d\n", nb);
    return (nb);
}

void    ft_print_combn(int n)
{
    int x;
    int y;
    int z;
    int nb;

    nb = find_nb(n, 0, -1, 0);
    while (nb <= find_min_max(n, 1))
    {
        x = nb % 10;
        y = nb / 10;
        z = y % 10;
        while (++x < 10)
        {
            nb = y *10 + x;
            if (nb < find_min_max(n, -1))
                ft_putchar(48);
            ft_putnbr(nb);
            if (nb < find_min_max(n, 1))
                write (1, ", ", 2);
        }
        nb = find_nb(n, nb, 1, 9);
    }
}

int main (void)
{
    ft_print_combn(2);
}
